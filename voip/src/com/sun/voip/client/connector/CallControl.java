/*
 * Copyright 2007 Sun Microsystems, Inc.
 *
 * This file is part of jVoiceBridge.
 *
 * jVoiceBridge is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License version 2 as 
 * published by the Free Software Foundation and distributed hereunder 
 * to you.
 *
 * jVoiceBridge is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied this 
 * code. 
 */

package com.sun.voip.client.connector;

import com.sun.voip.CallParticipant;
import java.io.IOException;

/**
 * The ability to control a single call within a conferece.  
 * Note that a <code>CallControl</code> can only be used once.  
 * Calling <code>placeCall()</code> more than once will
 * raise an exception.
 */
public interface CallControl {
    /**
     * Place a call to the specified call participant.  This method may only
     * be called once per call control.  Calling it multiple times will
     * cause an IOException to be thrown.
     *
     * @param participant the participant
     */
    public void placeCall(CallParticipant participant) throws IOException;

    /**
     * Transfer an incoming call to the appropriate conference.
     */
    public void transferCall(String callId, String conferenceId) 
        throws IOException;

    /**
     * Initializes the call control to affect a particular participant.
     */
    public void existingCall(CallParticipant participant) throws IOException;
    
    /**
     * Migrate a call from one endpoint (phone) to another.
     *
     * @param endpoint the endpoint (phone number or sip address) to call
     */
    public void migrateCall(CallParticipant participant) throws IOException;

    /**
     * Cancel a migration in progress
     */
    public void cancelMigration() throws IOException;

    /**
     * Gets whether there is already an established call for this callID.
     */
    public boolean isEstablished();
    
    /**
     * Get the id of this call.  The call id is generated by the Bridge, and
     * cannot be changed.
     *
     * @return the call id
     */
    public String getCallId();
     
    /**
     * Get the conferenceId of the conference this call is currently in.  This
     * values may be null if the call is not currently in a conference.
     * @return the conference id
     */
    public String getConferenceId();
    
    /**
     * Mute or unmute a call.
     * @param isMuted boolean indicating whether to mute or not.
     */
    public void setMute(boolean isMuted) throws IOException;

    public void setDetectWhileMuted(boolean value) throws IOException;
    public void setMuteConference(boolean value) throws IOException;
    public void setConferenceSilenced(boolean value) throws IOException;
	
    /**
     * Set the volume factor for a call.  The volumeFactor is normally 1.0.
     * Setting the factor to less than 1.0 lowers the volume, greater than 1.0
     * increases the volume.
     * @param volumeFactor float used to multiply the voice data thereby
     *			   increasing or decreasing the volume level.
     */
    public void setVolumeFactor(float volumeFactor) 
	throws IOException;

    /**
     * Set the stereo volumes for a call.All values are from 0.0 (mute) to 
     * 1.0 (normal) and higher to increase volume.  Normally volumes are 
     * [1.0, 0.0, 0.0, 1.0].  These volumes are shared by all callers.
     *
     * @param leftLeft the volume from the left input channel to the left 
     * output channel
     * @param leftRight the volume from the left input channel to the right
     * output channel
     * @param rightLeft the volume from the right input channel to the left
     * output channel
     * @param rightRight the volume from the right input channel to the right 
     * output channel
     */
    public void setStereoVolumes(float leftLeft, float leftRight,
                                 float rightLeft, float rightRight)
        throws IOException;
    
    /**
     * Set the stereo volumes for a call.All values are from 0.0 (mute) to 
     * 1.0 (normal) and higher to increase volume.  Normally volumes are 
     * [1.0, 0.0, 0.0, 1.0].  These volumes are private to this call.
     *
     * @param targetCallId the call id of the call to change volumes for
     * @param leftLeft the volume from the left input channel to the left 
     * output channel
     * @param leftRight the volume from the left input channel to the right
     * output channel
     * @param rightLeft the volume from the right input channel to the left
     * output channel
     * @param rightRight the volume from the right input channel to the right 
     * output channel
     */
    public void setPrivateVolumes(String targetCallId, 
                                  float leftLeft, float leftRight,
                                  float rightLeft, float rightRight)
        throws IOException;
    
    /**
     * Play an audio file to a particular call.
     * @param treatment String identifying path of treatment file.
     */
    public void playTreatment(String treatment) 
	throws IOException;    
    
    /**
     * Stop all audio treatments to this call.
     */
    public void stopAllTreatments() 
	throws IOException;
    
    /**
     * Enable or disable whispering on this call
     *
     * @param enabled if true, this call can be added to whisper groups.  If
     * false it can't
     */
    public void setWhisperEnabled(boolean enabled)
        throws IOException;

    /**
     * Mute or unmute this call in whisper groups.
     * @param isMuted boolean indicating whether to mute or not.
     */
    public void setWhisperMute(boolean isMuted) throws IOException;
       
    /**
     * Create a whisper group
     * This needs to be here for for synchronization for outgoing calls 
     * so that the same socket to create the whisper group is used 
     * to place the call.
     *
     * @param whisperGroupId String whisper group id
     * @param trans if true, create a transient group that goes away when
     * everyone leaves
     * @param locked if true, create a locked group where people cannot stop
     * whispering
     * @param conferenceVolumeLevel float conference volume level in whiser 
     * group
     */
    public void createWhisperGroup(String whisperGroupId,
                                   boolean trans, boolean locked,
                                   float conferenceVolumeLevel)
        throws IOException;

    /**
     * Destroy a whisper group
     * 
     * @param whisperGroupId String whisper group id
     */
    public void destroyWhisperGroup(String whisperGroupId) throws IOException;

    /**
     * Add this call to a whisper group
     *
     * @param whisperGroupId String whisper group id
     */
    public void addCallToWhisperGroup(String whisperGroupId) throws IOException;

    /**
     * Add this call from a whisper group
     *
     * @param whisperGroupId String whisper group id
     */
    public void removeCallFromWhisperGroup(String whisperGroupId) throws IOException;

    /**
     * Return whether or not whispering is enabled on this call control
     *
     * @return true if whispering is enabled, or false if not
     */
    public boolean isWhisperEnabled();
    
    /**
     * Get the set of whisper groups this call control is a member of
     *
     * @return the whisper groups this call is a member of
     */
    public String[] getWhisperGroups(); 
    
    /**
     * Start whispering in the given whisper group.  Note this will
     * stop whispering in any other group the user is currently 
     * whispering in.
     *
     * @param whisperGroup the whisper group to start whispering in
     */
    public void startWhispering(String whisperGroup)
        throws IOException;
    
    /**
     * Determine the current whisper group this user is whispering in
     *
     * @return the whisper group the user is actively whispering in, or null
     * if the user is not whispering
     */
    public String getWhisperingGroup();
    
    /**
     * Stop whispering in the current whisper group
     */
    public void stopWhispering() throws IOException;
    
    /**
     * End a call
     */
    public void endCall() throws IOException; 
    
    public void endCall(String callId) throws IOException;

    /**
     * Add a listener that will be notified of status changes on this
     * call.
     *
     * @param listener the listener
     */
    public void addCallStatusListener(CallStatusListener listener);

    /**
     * Remove a status listener
     */
    public void removeCallStatusListener(CallStatusListener listener);
    
    /**
     * Record the audio of a call
     */
    public void recordCall(String recordingFile) throws IOException;
    
    /**
     * Stop recording the audio of a call
     */
    public void stopRecordingCall() throws IOException;
}
