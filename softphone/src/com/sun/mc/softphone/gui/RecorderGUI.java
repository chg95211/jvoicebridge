/*
 * Copyright 2007 Sun Microsystems, Inc.
 *
 * This file is part of jVoiceBridge.
 *
 * jVoiceBridge is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License version 2 as 
 * published by the Free Software Foundation and distributed hereunder 
 * to you.
 *
 * jVoiceBridge is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied this 
 * code. 
 */

package com.sun.mc.softphone.gui;

import com.sun.mc.softphone.gui.config.ConfigurationFrame;
import com.sun.mc.softphone.gui.event.UserActionListener;
import com.sun.mc.softphone.gui.event.UserCallControlEvent;
import com.sun.mc.softphone.gui.event.UserDtmfEvent;
import com.sun.mc.softphone.media.CallDoneListener;
import com.sun.mc.softphone.media.MediaManager;
import com.sun.mc.softphone.media.MediaManagerFactory;
import com.sun.mc.softphone.sip.Call;
import java.awt.Component;
import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author  jkaplan
 */
public class RecorderGUI extends javax.swing.JFrame 
        implements GuiManagerUI, GuiCallback, CallDoneListener 
{
    //Global status codes
    public static final String NOT_REGISTERED = "Not Registered";
    public static final String UNREGISTERING = "Unregistering, please wait!";
    public static final String REGISTERING = "Trying to register as:";
    public static final String REGISTERED = "Registered as ";
    
    // ui listeners
    private Set listeners = Collections.synchronizedSet(new HashSet());
    
    // status of the current call
    private InterlocutorUI interlocutor;
    
    // whether or not we have successfully registered
    private boolean registered = false;
    
    // the current call state
    private String callState = Call.DISCONNECTED;
    
    // whether or not we are recording
    private boolean recording = false;
    
    /** Creates new form Recorder */
    public RecorderGUI(Boolean visibleUI) {
        initComponents();
        
        addressField.setText("Starting up...");
        recordFileField.getDocument().addDocumentListener(new DocumentListener() {
            public void removeUpdate(DocumentEvent e) {
                updateStatus();
            }
            public void insertUpdate(DocumentEvent e) {
                updateStatus();
            }
            public void changedUpdate(DocumentEvent e) {
                updateStatus();
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        recordFileField = new javax.swing.JTextField();
        recordButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        statusField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        configItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        quitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Meeting Central Recorder");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Recording File:");

        recordButton.setText("Record");
        recordButton.setEnabled(false);
        recordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Address:");

        addressField.setEditable(false);

        jLabel3.setText("Status:");

        statusField.setEditable(false);

        fileMenu.setText("File");
        configItem.setText("Configure...");
        configItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configItemActionPerformed(evt);
            }
        });

        fileMenu.add(configItem);

        fileMenu.add(jSeparator1);

        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });

        fileMenu.add(quitItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(recordFileField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, addressField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .add(statusField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(recordButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stopButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(recordFileField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(addressField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stopButton)
                    .add(recordButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        callDone();
        System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

    private void configItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configItemActionPerformed
        showConfigFrame();
    }//GEN-LAST:event_configItemActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        callDone();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void recordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordButtonActionPerformed
        MediaManager mm = MediaManagerFactory.getInstance();
        String path = recordFileField.getText().trim();
        String type = "au";
        
        try {
            mm.startRecording(path, type, false, this);
            recording = true;
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        
        updateStatus();
    }//GEN-LAST:event_recordButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (interlocutor != null) {
            hangUp(interlocutor);
        }
        
        System.exit(0); 
    }//GEN-LAST:event_formWindowClosing

    ///////////////////////////////
    // GuiManagerUI methods
   
    public boolean startDtmf(String key) {
        if(interlocutor == null) {
            return false;
        }
        
        UserDtmfEvent dtmfEvt = new UserDtmfEvent(interlocutor, true, key);
        UserActionListener[] l = (UserActionListener[])
                listeners.toArray(new UserActionListener[0]);
        for (int i = 0; i < l.length; i++) {
            l[i].handleDtmfRequest(dtmfEvt);
        }
        
        return true;
    }
    
    public boolean stopDtmf(String key) {
        if(interlocutor == null) {
            return false;
        }
        
        UserDtmfEvent dtmfEvt = new UserDtmfEvent(interlocutor, false, key);
        UserActionListener[] l = (UserActionListener[])
                listeners.toArray(new UserActionListener[0]);
        for (int i = 0; i < l.length; i++) {
            l[i].handleDtmfRequest(dtmfEvt);
        }
        
        return true;
    }

    public void startAlert(String alertResourceName) {
        // ignore
    }
    
    public void stopAlert(String alertResourceName) {
        // ignore
    }

    public void addUserActionListener(UserActionListener l) {
        listeners.add(l);
    }

    public void removeUserActionListener(UserActionListener l) {
        listeners.remove(l);
    }

    public void showLineTest(MediaManager mediaManager) {
        // ignore
    }

    public void showNetworkInterfaceConfig() {
        // ignore
    }

    public void showPhoneFrame(boolean show) {
        setVisible(show);
    }

    public void showConfigFrame() {
        new ConfigurationFrame();
    }
    
    public void addInterlocutor(InterlocutorUI interlocutor) {
        if (this.interlocutor == null) {
            this.interlocutor = interlocutor;
            interlocutor.setCallback(this);   
            update(interlocutor);
        } else {
            // no available lines
            hangUp(interlocutor);
        }
    }

    private void hangUp(InterlocutorUI interlocutor) {
        UserCallControlEvent commEvt = new UserCallControlEvent(interlocutor);
        
        UserActionListener[] l = (UserActionListener[])
                listeners.toArray(new UserActionListener[0]);
        for (int i = 0; i < l.length; i++) {
            l[i].handleHangupRequest(commEvt);
        }
    }
    
    public void update(InterlocutorUI interlocutor) {
        callState = interlocutor.getCallState();
        updateStatus();
    }

    public void remove(InterlocutorUI interlocutor) {
        if (this.interlocutor == interlocutor) {
            this.interlocutor = null;
        }
    }
    
    public void addControlComponent(Component cComp) {
        // ignore
    }

    public void addVisualComponent(Component vComp) {
        // ignore
    }

    public void removePlayerComponents() {
        // ignore
    }
    
    public void setCommunicationActionsEnabled(boolean enabled) {
        // ignore
    }
    
    public void setPhoneNumber(String phoneNumber) {
        // ignore
    }

    public void setGlobalStatus(String statusCode, String reason) {
        if (statusCode == REGISTERING) {
            addressField.setText("Registering...");
        } else if (statusCode == UNREGISTERING) {
            addressField.setText("Unregistering...");
        } else if (statusCode == NOT_REGISTERED) {
            addressField.setText("Registration failed: " + reason);
            registered = false;
        } else if (statusCode == REGISTERED) {
            Matcher m = Pattern.compile(".*<(.*);.*").matcher(reason);
            if (m.matches()) {
                reason = m.group(1);
            }
            
            addressField.setText(reason);
            addressField.setToolTipText(reason);
        
            registered = true;
        }
        
        updateStatus();
    }
    
    private void updateStatus() {
        String status = "Starting up...";
        boolean connected = false;
        boolean canRecord = false;
        boolean canStop = false;
        
        if (!registered) {
            status = "Waiting for registration...";
        } else {
            if (Call.DISCONNECTED.equals(callState)) {
                status = "Waiting for call...";
            } else if (Call.ALERTING.equals(callState)) {
                status = "Incoming call.";
            } else if (Call.CONNECTED.equals(callState)) {
                if (recording) {
                    status = "Recording in progress.";
                    canStop = true;
                } else if (recordFileField.getText().trim().length() > 0) {
                    status = "Connected.  Ready to start recording";
                    canRecord = true;
                } else {
                    status = "Connected.  Enter file name.";
                }
            } else {
                status = callState;
            }
        }
        
        statusField.setText(status);
        recordButton.setEnabled(canRecord);
        stopButton.setEnabled(canStop);
    }
    
    public void muted(boolean isMuted) {
        // ignore
    }

    public void requestAuthentication(String realm, String userName, 
                                      String authenticationUserName, 
                                      char[] password) 
    {
        // not supported
    }

    public String getUserName()
    {
        // not supported
        return null;
    }

    public String getAuthenticationUserName()
    {
        // not supported
        return null;
    }

    public char[] getAuthenticationPassword()
    {
        // not supported
        return null;
    }

    public void callDone() {
        MediaManager mm = MediaManagerFactory.getInstance();
        mm.stopRecording(false);
    
        recording = false;
        updateStatus();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecorderGUI(Boolean.TRUE).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JMenuItem configItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JButton recordButton;
    private javax.swing.JTextField recordFileField;
    private javax.swing.JTextField statusField;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
